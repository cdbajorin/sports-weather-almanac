<script type="text/javascript">

$(function() {

  //For axis begins:
  var margin = {top: 20, right: 0, bottom: 20, left: 0},
  width = 1350 - margin.left - margin.right,
  height = 500 - margin.top - margin.bottom;

  var formatNumber = d3.format(".1f");

  var y = d3.scale.linear()
  .domain([0, 1e7])
  .range([height, 0]);

  var x = d3.time.scale()
  .domain([new Date(2000, 7, 1), new Date(2014, 6, 1)])
  .range([0, width]);

  var xAxis = d3.svg.axis()
  .scale(x)
  .ticks(d3.time.years)
  .tickSize(6, 0)
  .orient("bottom");

  var yAxis = d3.svg.axis()
  .scale(y)
  .tickSize(width)
  .tickFormat(formatTemperature)
  .orient("right");

  //Axes plots
  var svg = d3.select("body").append("svg")
  .attr("class", "axes_graph")
  .attr("id", "temp")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)

  var gy = svg.append("g")
  .attr("class", "y axis")
  .call(yAxis)
  .call(customAxis);

  var gx = svg.append("g")
  .attr("class", "x axis")
  .attr("transform", "translate(0," + height + ")")
  .call(xAxis);

  //Range for y axi()
  setTimeout(function() {
    y.domain([0, 100e6]);

    gy.transition()
    .duration(2500)
    .call(yAxis)
    .selectAll("text") // cancel transition on customized attributes
    .tween("attr.x", null)
    .tween("attr.dy", null);

    gy.call(customAxis);
  }, 1000);

  function customAxis(g) {
    g.selectAll("text")
    .attr("x", 4)
    .attr("dy", -4);
  }

  function formatTemperature(d) {
    var s = formatNumber(d / 1e6);
    return d === y.domain()[1]
    ? "$" + s + " degrees"
    : s;
  }

  //For axis ends

  // For box plot begins:
  var margin = {top: 10, right: 50, bottom: 20, left: 50},
  width = 120 - margin.left - margin.right,
  height = 500 - margin.top - margin.bottom;


  var min = Infinity,
  max = -Infinity;

  var chart = d3.box()
  // .whiskers(iqr(1.3))
  .width(width)
  .height(height);
  // For box plot ends





////////////////// possibly working... ///////////////////

  d3.csv("/morley.csv", function(error, csv) {
    var data = [];
    // console.log(csv);


    //   chartDataSet.forEach(function(x,y) {

    //   var ab = Math.floor(x[0]);
    //   var m = Math.floor(x[1]);
    //   var yz = Math.floor(x[2]);
    //   if (yz > max) { max = yz; }
    //   if (ab < min) { min - ab; }
    // });

    csv.forEach(function(x,y) {
      var e = Math.floor(x.Expt-1),
      r = Math.floor(x.Run-1),
      s = Math.floor(x.Speed),
      d = data[e];
      if (!d) d = data[e] = [s];
      else d.push(s);
        if (s > max) max = s;
          if (s < min) min = s;
          });


          chart.domain([min, max]);

          //svg append for box plot to node
          // var svg = d3.select("svg")

          //v1 Appends to the body html page
          // var svg = d3.select("body").selectAll("svg")

          //v2 Appends to the graph
          // var svg = d3.select("body")
          // .selectAll("svg")

          //v3 Appends to the body of the chart, but collapses
          //notes: selects to a node of the y-axis
          // var svg = d3.select("svg").append("g")

          var svg = d3.select("svg")
          // .append("div")
          // var box = d3.select("svg")
          // svg.append("g")
          .data(data)
          // .enter()
          .enter().append("svg")
          // .each(function(d) {
            // var minimum = d3.quantile(d, 0); //minimum number of each object
            // var new_svg = d3.select(this).append("testclass")
              // var g = d3.select("testclass");
              // console.log(g);

            // d3.select("testclass")
            // .data(data)
            // .enter().append("svg")
            // .attr("class", "box")
            // .attr("width", width + margin.left + margin.right)
            // .attr("height", height + margin.bottom + margin.top)
            // .append("g")
            // .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            // .call(chart);

            // console.log(minimum);
          // }) //end of each function
          .attr("class", "box")
          // .attr("box", 3.5)
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.bottom + margin.top)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
          // .enter()
          .call(chart);

          //original box plot append box
          // var svg = d3.select("body").selectAll("svg")
          // .data(data)
          // .enter().append("svg")
          // .attr("class", "box")
          // .attr("width", width + margin.left + margin.right)
          // .attr("height", height + margin.bottom + margin.top)
          // .append("g")
          // .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
          // .call(chart);



          // setInterval(function() {

          // }, 2000);
        });

        // function randomize(d) {
          //   if (!d.randomizer) d.randomizer = randomizer(d);
          //     return d.map(d.randomizer);
        //   }

        // function randomizer(d) {
        //     var k = d3.max(d) * .02;
        //     return function(d) {
        //         return Math.max(min, Math.min(max, d + k * (Math.random() - .5)));
        //     };
        // }

        // Returns a function to compute the interquartile range.
        // function iqr(k) {
          //   return function(d, i) {
            //     var q1 = d.quartiles[0],
            //     q3 = d.quartiles[2],
            //     iqr = (q3 - q1) * k,
            //     i = -1,
            //     j = d.length;
            //     while (d[++i] < q1 - iqr);
            //       while (d[--j] > q3 + iqr);
            //         return [i, j];
          //       };
        //     }
        //d3 graphic part ends

        //d3 DATA Calls
        function splitToNumArray(string){
          var results_array = [];
          var temp_array = string.split(",");
          temp_array.forEach(function(num) {
            results_array.push(parseFloat(num));
          });
          results_array.forEach(function(x,i) {
            if (isNaN(x)) {
              results_array[i] = -1;
            }
          })
          return results_array;
        }

        function checkWeatherCache(path) {
          var $weatherList = $("#weather-list");

          $.ajax({
            url: path,
            type: "GET",
            dataType: "json"
          }).done(function(data) {
            console.log(data)

            data.forEach(function(weather){
              console.log(weather)
              var weatherTemplate = _.template($("#weatherTemplate").html(), weather);
              $weatherList.append(weatherTemplate);
            })
          });
        }



      }); // end of function
      </script>


